@grammar calculator;

@terminals
    EPS: "EPS";
    LB: "\\(";
    RB: "\\)";
    PLUS: "\\+";
    MINUS: "-";
    MUL: "\\*";
    DIV: "/";
    DIGIT: "[0-9]+";

@start: e;

@rules
    e returns [int x] : t # int left = r0.x; # e_[left]  # res.x = r1.x; #;
    e_[int arg] returns [int x] :
        PLUS t # int val = r0.x; # plus_op[arg, val] # int cur = r1.x; # e_[cur] # res.x = r2.x; # |
        MINUS t # int val = r0.x; # minus_op[arg, val] # int cur = r1.x; # e_[cur] # res.x = r2.x; # |
        EPS # res.x = arg; #;
    t returns [int x] : f # int left = r0.x; # t_[left]  # res.x = r1.x; #;
    t_[int arg] returns [int x] :
        MUL f # int val = r0.x; # mul_op[arg, val] # int cur = r1.x; # t_[cur] # res.x = r2.x; # |
            DIV f # int val = r0.x; # div_op[arg, val] # int cur = r1.x; # t_[cur] # res.x = r2.x; # |
            EPS # res.x = arg; #;

    f returns [int x]: LB e RB # res.x = r0.x; # |
        DIGIT # res.x = Integer.parseInt(lexer.getCurToken().getValue()); #;

    plus_op[int a, int b] returns[int x]: EPS # res.x = a + b; #;
    minus_op[int a, int b] returns[int x]: EPS # res.x = a - b; #;
    mul_op[int a, int b] returns[int x]: EPS # res.x = a * b; #;
    div_op[int a, int b] returns[int x]: EPS # res.x = a / b; #;
